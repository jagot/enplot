#!/usr/bin/env python
"""
enplot: A command-line tool for quickly plotting data in CSV and related
formats.

Requires:

   1) Python
   2) NumPy
   3) matplotlib

Robert Johansson <robert@riken.jp>
License: LGPL
"""

# import scipy
import sys
import numpy
import enplot
import itertools

import enplot.version

#
# Configure and parse the command-line arguments
#
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("datafile",
                    help="a data file in a CSV-like format",
                    type=str, nargs='*')
parser.add_argument("-t", "--title",
                    help="plot title", type=str)
parser.add_argument("-o", "--output-file",
                    help="file name for output", type=str)
parser.add_argument("-f", "--output-format",
                    help="file format for output", type=str)
parser.add_argument("-x",
                    help="column index in the data file for use as X variable",
                    type=str)
parser.add_argument("-y",
                    help=("comma-separated list of column index in " +
                          "the data file for use as Y variables"), type=str)
parser.add_argument("-z",
                    help=("comma-separated list of column index in " +
                          "the data file for use as Y variables"), type=str)
parser.add_argument("-m", "--matrix-form",
                    help="data in matrix form", action='store_true')
parser.add_argument("-T", "--matrix-transpose",
                    help="transpose data in matrix form", action='store_true')
parser.add_argument("-L", "--log", help="Loglog axes", action='store_true', default=False)
parser.add_argument("-Lx", "--logx", help="Semilogx axes", action='store_true', default=False)
parser.add_argument("-Ly", "--logy", help="Semilogy axes", action='store_true', default=False)
parser.add_argument("-M", "--margins", help="Add margins around the plot", type=str, default="0,0")
parser.add_argument("-X", "--x-label",
                    help="label for use on X axis", type=str)
parser.add_argument("-Y", "--y-label",
                    help="label for use on Y axis", type=str)
parser.add_argument("-Z", "--z-label",
                    help="label for use on Z axis", type=str)
parser.add_argument("-l", "--legends",
                    help="comma-separated list of legends", type=str)
parser.add_argument("-S", "--sort",
                    help="sort the data by the X-axis data points",
                    action='store_true', default=False)
parser.add_argument("-s", "--style",
                    help="graph style ('line', 'bar')",
                    default='line')
parser.add_argument("-q", "--quiet", help="do not display plot window",
                    action='store_true', default=False)
parser.add_argument("-d", "--debug", help="activate debug printouts",
                    action='store_true', default=False)
parser.add_argument("-v", "--view",
                    help="view perspective (top or 3d)", type=str)
parser.add_argument("-V", "--version",
                    help="show version information", action='store_true')
parser.add_argument("-c", "--colorbar",
                    help="Show colorbar", action='store_true')
args = parser.parse_args()

#
#
#
if args.version:
    print("version = %s [%s]" % (enplot.version.version,
                                 enplot.version.revision))
    sys.exit(0)

#
#
#
if len(args.datafile) < 1:
    parser.print_help()
    sys.exit(0)

#
# process command-line arguemnts
#
colorcycler = itertools.cycle(['blue', 'green', 'red', 'magenta', 'cyan'])

if not args.z:
    xcol = int(args.x) if args.x else -1
    ycols = [int(y) for y in args.y.split(",")] if args.y else [0]
    zcols = []
else:
    xcol = int(args.x) if args.x else 0
    ycol = int(args.y) if args.y else 1
    zcols = [int(z) for z in args.z.split(",")] if args.z else [0]

#
# Use matplotlib to create the plot
#
import matplotlib
from matplotlib import pyplot, cm, rcParams
from mpl_toolkits.mplot3d import Axes3D

params = {'font.family': 'serif',
          'font.size': 16,
          'axes.labelsize': 18,
          'text.fontsize': 18,
          'legend.fontsize': 18,
          'xtick.labelsize': 18,
          'ytick.labelsize': 18,
          'text.usetex': True}
matplotlib.rcParams.update(params)
import pylab as plt


#
# Read and process the data from a files.
#
if not args.z and not args.matrix_form:
    #
    # 2d plot
    #
    fig, axes = plt.subplots(1, 1, figsize=(8, 6))

    for data_file in args.datafile:

        if args.debug:
            print("Processing data file " + data_file)

        M, m, n = enplot.file_data_read(data_file)

        if args.sort:
            M = enplot.data_matrix_sort(M, xcol)

        for i in ycols:
            if i < n:
                if xcol != -1:
                    xdata = M[:, xcol]
                    ydata = M[:, int(i)]
                else:
                    xdata = numpy.arange(len(M[:, int(i)]))
                    ydata = M[:, int(i)]

                if args.style == 'line':
                    axes.plot(xdata, ydata, color=next(colorcycler))
                elif args.style == 'scatter':
                    axes.scatter(xdata, ydata, color=next(colorcycler))
                elif args.style == 'fill':
                    axes.fill_between(xdata, ydata, numpy.zeros(ydata.shape),
                              color=next(colorcycler), alpha=0.25)
                elif args.style == 'bar':
                    axes.bar(xdata, ydata,
                             color=next(colorcycler), align='center')
                else:
                    raise TypeError("unrecongized plot style (-s argument)")

            else:
                print("The data file", data_file,
                      ": column", i, "does not exist.", n)

    #
    # Add plot title, labels and legend
    #
    if args.title and len(args.title) > 0:
        axes.set_title(args.title)

    if args.x_label and len(args.x_label) > 0:
        axes.set_xlabel(args.x_label)

    if args.y_label and len(args.y_label) > 0:
        axes.set_ylabel(args.y_label)

    if args.legends and len(args.legends) > 0:
        axes.legend(args.legends.split(","))

    if args.log or args.logx:
        axes.set_xscale("log")
    if args.log or args.logy:
        axes.set_yscale("log")

    axes.autoscale(tight=True)

    margins = [float(m) for m in args.margins.split(",")]
    axes.margins(*margins)

else:
    #
    # 3D plots
    #
    fig = plt.figure(figsize=(8, 6))

    if args.z:
        nax = len(zcols)
        ax_cols = numpy.ceil(nax / numpy.sqrt(nax))
        ax_rows = numpy.ceil(nax / ax_cols)

    #
    #
    #
    for data_file in args.datafile:

        ax_idx = 1

        M, m, n = enplot.file_data_read(data_file)

        if args.matrix_form:
            # data already in matrix form

            if args.matrix_transpose:
                M = M.T

            if args.view == "3d":
                ax = fig.add_subplot(1, 1, 1, projection='3d')
                X, Y = numpy.meshgrid(range(m), range(n))
                surf = ax.plot_surface(X, Y, M, rstride=1, cstride=1,
                                       cmap=cm.jet,
                                       linewidth=0, antialiased=True)

            else:
                ax = fig.add_subplot(1, 1, 1)
                p = ax.pcolor(M, antialiased=False, cmap=cm.RdBu)
                if args.colorbar:
                    cb = fig.colorbar(p, ax=ax, fraction=0.05, aspect=30)

            ax.autoscale(tight=True)

        else:
            # data in list form

            for zcol in zcols:

                if args.debug:
                    print("Processing z column", zcol, "data file ", data_file)

                X, Y, Z = enplot.build_matrix(M, xcol, ycol, zcol)

                if args.view == "3d":
                    ax = fig.add_subplot(ax_rows, ax_cols, ax_idx,
                                         projection='3d')
                    # /,azim=-90, elev=-90)
                    surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1,
                                           cmap=cm.jet,
                                           linewidth=0, antialiased=False)

                else:
                    ax = fig.add_subplot(ax_rows, ax_cols, ax_idx)
                    p = ax.pcolor(X, Y, Z.T, antialiased=False, cmap=cm.RdBu)
                    if args.colorbar:
                        cb = fig.colorbar(p, fraction=0.05, aspect=30)

                ax.autoscale(tight=True)

        #
        # Add plot title, labels and legend
        #
        if args.title and len(args.title) > 0:
            ax.set_title(args.title)

        if args.x_label and len(args.x_label) > 0:
            ax.set_xlabel(args.x_label)

        if args.y_label and len(args.y_label) > 0:
            ax.set_ylabel(args.y_label)

        if args.legends and len(args.legends) > 0:
            ax.legend(args.legends.split(","))

        ax_idx = ax_idx + 1


#
# save and/or display figure
#
if args.output_file and len(args.output_file):
    if args.output_file:
        fig.savefig(args.output_file, format=args.output_format)
    else:
        fig.savefig(args.output_file)

if not args.quiet:
    plt.show()
